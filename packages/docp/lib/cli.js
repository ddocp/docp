#!/usr/bin/env node --no-warnings
"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const process_1 = __importDefault(require("process"));
const minimist_1 = __importDefault(require("minimist"));
const Service_1 = __importDefault(require("./Service"));
const utils_1 = require("./utils");
const path_1 = __importDefault(require("path"));
class CLI {
    run() {
        const args = this.parseArgs();
        const { command, help, version, _ } = args, options = __rest(args, ["command", "help", "version", "_"]);
        if (['serve', 'build'].indexOf(command) > -1) {
            const service = new Service_1.default();
            const formattedOptions = this.formatUserInput(options);
            service[command](formattedOptions);
        }
        else if (version) {
            utils_1.log.success(require('../package.json').version);
        }
        else {
            console.log('');
            utils_1.log.success('docp version: ', require('../package.json').version);
            console.log('Usage: docp <command> [options]');
            console.log('');
            utils_1.log.success('commands:');
            console.log('  serve [options]    Preview website generated by docp');
            console.log('  build [options]    Generate your doc website');
            console.log('');
            utils_1.log.success('options:');
            console.log('  --config           Specify configuration file. Default to ./docp.config.js');
            console.log('  --entry            Default to ./*.md');
            console.log('  --output           Default to ./dist');
            console.log('  --port             Specify local server port. default to 3000');
            console.log('');
            process_1.default.exit(0);
        }
    }
    parseArgs() {
        const args = (0, minimist_1.default)(process_1.default.argv.slice(2), {
            boolean: ['version', 'help'],
        });
        const _ = args._;
        return Object.assign(Object.assign({}, args), { _, command: _[0] });
    }
    formatUserInput(args) {
        if (typeof args.config !== 'string') {
            args.config = 'docp.config.js';
        }
        args.config = path_1.default.resolve(process_1.default.cwd(), args.config);
        return args;
    }
}
exports.default = CLI;
new CLI().run();
//# sourceMappingURL=cli.js.map